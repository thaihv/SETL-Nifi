<%@ page contentType="text/html" pageEncoding="UTF-8" session="false"%>
<script type="text/javascript" src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script type="text/javascript" src="https://unpkg.com/leaflet.vectorgrid@latest/dist/Leaflet.VectorGrid.bundled.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.8.0/proj4.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/leaflet-loading@0.1.24/src/Control.Loading.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"/>	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet-loading@0.1.24/src/Control.Loading.css" />

<style>
.nifi-map-popup .leaflet-popup-tip, 
.nifi-map-popup .leaflet-popup-content-wrapper {
	background: #8f9fb0;
	color: #fff;
	font-size: 12px;
}
.nifi-map-popup b {
	font: 12px Arial, sans-serif;
	font-weight: bold;
}
.nifi-map-popup table {
	border: 1px solid black;
	border-collapse: separate;
	border-spacing: 2px;
}
.nifi-map-popup td {
	border: 1px solid black;	
	border-radius: 3px;
}
.nifi-map-popup td {
	background-color: #8f9fc3;
}
</style>

<div class='nifi-map-popup' id="map" style="height: 800px; width: 800px; position: relative; padding: 0px; margin: 0 auto 0 auto;"></div>

<script> 
	var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
	    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
	});
	var baseMaps = {
		    "OSM": osm
		};
	var geoType = "<%=request.getAttribute("geoType")%>";
	var crs = '<%=request.getAttribute("crs")%>';
	if (geoType == "Tiles"){
		
		var resourceUri = "<%=request.getAttribute("resourceUri")%>";
		var urlGeoTiles = resourceUri + "/{z}/{x}/{y}";
		var envelope    = <%=request.getAttribute("envelope")%>;
		var center      = <%=request.getAttribute("center")%>;
		var zoom_init   = <%=request.getAttribute("zoom_min")%>;
		var zoom_max    = <%=request.getAttribute("zoom_max")%>;
		
	    var myTiles = new L.tileLayer(urlGeoTiles, {
	        minZoom: zoom_init,
	        maxZoom: zoom_max,
	        tms: false, // need check from server to get Tiles status 
	        attribution: 'Generated by Jungdo-SETL engine'
	      });
		var myTileBound;
		myTiles.onAdd = function() {
			this._initContainer();

			this._levels = {};
			this._tiles = {};

			this._resetView();
			this._update();
			// For first step, store the tile 0,0 boundary to fit in
			myTileBound = this._tileCoordsToBounds(L.point({x: center[0], y: center[1], z: zoom_init}));
		}
	    
		var grid = new L.GridLayer();
		grid.createTile = function(coords) {
		  var tile = L.DomUtil.create('canvas', 'leaflet-tile');
		  var ctx = tile.getContext('2d');
		  var size = this.getTileSize()
		  tile.width = size.x
		  tile.height = size.y
		  
		  // calculate projection coordinates of top left tile pixel
		  var nwPoint = coords.scaleBy(size)
		  
		  // calculate geographic coordinates of top left tile pixel
		  var nw = map.unproject(nwPoint, coords.z)
		  ctx.fillStyle = 'white';
		  ctx.fillRect(0, 0, size.x, 50);
		  ctx.fillStyle = 'black';
		  ctx.fillText('x: ' + coords.x + ', y: ' + coords.y + ', zoom: ' + coords.z, 20, 20);
		  ctx.fillText('lat: ' + nw.lat + ', lon: ' + nw.lng, 20, 40);
		  ctx.strokeStyle = 'red';
		  ctx.beginPath();
		  ctx.moveTo(0, 0);
		  ctx.lineTo(size.x-1, 0);
		  ctx.lineTo(size.x-1, size.y-1);
		  ctx.lineTo(0, size.y-1);
		  ctx.closePath();
		  ctx.stroke();
		  return tile;
		}	    
		var geocenter = [105.65287399291995,20.975032806396456];  // Ha Noi,  Vietnam as default location 
		var map = L.map('map', {    
			center: [geocenter[1],geocenter[0]], 
		    zoom: zoom_init,
		    layers: [myTiles],
			loadingControl: true});
	    
		var baseMaps = {
				"Tiles": myTiles
			};	    
		var overlayMaps = {
				"Grid Cells":  grid
			};
		L.control.layers(baseMaps, overlayMaps).addTo(map);
		L.control.scale().addTo(map);
				
		map.on('click', function(e){
			  var coord = e.latlng;
			  var lat = coord.lat;
			  var lng = coord.lng;
			  var content = "You are at lat/lon: " + lat + "; " + lng;
			  var popup = L.popup().setLatLng(coord).setContent(content).openOn(map);
			  });	    
		map.whenReady(function(){
			map.fitBounds(myTileBound);
		});		
	}
	else{	
			var resourceUri = "<%=request.getAttribute("resourceUri")%>";
			var urlGeoTiles = resourceUri + "/{z}/{x}/{y}.mvt";
			var envelope    = <%=request.getAttribute("envelope")%>;
			var center      = <%=request.getAttribute("center")%>;
			
			var geocenter = [105.65287399291995,20.975032806396456];  // Ha Noi,  Vietnam as default location 
			if (center !== null)
				geocenter = proj4(crs,'EPSG:4326',center);
			
			var map = L.map('map', {    
				center: [geocenter[1],geocenter[0]],
			    zoom: 12,
			    layers: [osm],
				loadingControl: true});
			
			var bounds;
			if (envelope !== null){
				var corner1 = [envelope[0][0], envelope[1][0]];
				var corner2 = [envelope[0][1], envelope[1][1]];			
				corner1 = proj4(crs,'EPSG:4326',corner1);
				corner2 = proj4(crs,'EPSG:4326',corner2);	
				// Revert from X,Y to Y,X to get work with Leaflet
				corner1 = L.latLng(corner1[1], corner1[0]);
				corner2 = L.latLng(corner2[1], corner2[0]);				
				bounds  = L.latLngBounds(corner1, corner2);				
			}			
			
			var grid = new L.GridLayer();
			grid.createTile = function(coords) {
			  var tile = L.DomUtil.create('canvas', 'leaflet-tile');
			  var ctx = tile.getContext('2d');
			  var size = this.getTileSize()
			  tile.width = size.x
			  tile.height = size.y
			  
			  // calculate projection coordinates of top left tile pixel
			  var nwPoint = coords.scaleBy(size)
			  // calculate projection coordinates of bottom right tile pixel
			  var sePoint = nwPoint.add(size);

			  // calculate geographic coordinates of top left tile pixel
			  var nw = map.unproject(nwPoint, coords.z)
			  // calculate geographic coordinates of bottom right tile pixel
			  var se = map.unproject(sePoint, coords.z);
			// calculate geographic coordinates of tile bound
			  var bounds = new L.LatLngBounds(nw, se);

			  
			  ctx.fillStyle = 'white';
			  ctx.fillRect(0, 0, size.x, 50);
			  ctx.fillStyle = 'black';
			  ctx.fillText('x: ' + coords.x + ', y: ' + coords.y + ', zoom: ' + coords.z, 20, 20);
			  ctx.fillText('lat: ' + nw.lat + ', lon: ' + nw.lng, 20, 40);
			  ctx.strokeStyle = 'red';
			  ctx.beginPath();
			  ctx.moveTo(0, 0);
			  ctx.lineTo(size.x-1, 0);
			  ctx.lineTo(size.x-1, size.y-1);
			  ctx.lineTo(0, size.y-1);
			  ctx.closePath();
			  ctx.stroke();
			  return tile;
			}
			
			var vectorTileStyling = {
					polygons: {
						fill: true,
						weight: 1.5,
						fillColor: '#e5b404',
						color: '#1f7d1f',
						fillOpacity: 0.5
					},
					lines: {	
						weight: 1.5,
						fillColor: '#1f7d1f',
						color: '#1f7d1f',
						fillOpacity: 0.2
					},
					points: {
						radius: 12,
						weight: 1.5,
						fillColor: '#e5b404',
						color: '#1f7d1f',
					    opacity: 1,
					    fillOpacity: 0.8
					}
				};
			
			var myStyle = {};
			myStyle["myPolygons"] = vectorTileStyling.polygons;
			myStyle["myLines"   ] = vectorTileStyling.lines;
			myStyle["myPoints"   ] = vectorTileStyling.points;
			
			var mapboxVectorTileOptions = {
					rendererFactory: L.canvas.tile,
					attribution: 'Generated by Jungdo-SETL engine',
					vectorTileLayerStyles: myStyle,
					interactive: true,
					getFeatureId: function(f) {
						return f.properties.feature_id;
					}
				};
			
			var highlight;
			var clearHighlight = function() {
				if (highlight) {
					mapboxTileLayer.resetFeatureStyle(highlight);
				}
				highlight = null;
			};			
			var mapboxTileLayer = L.vectorGrid.protobuf(urlGeoTiles, mapboxVectorTileOptions)
			.on('click', function(e) {
				var properties = e.layer.properties;
				var content = "<table>";
				var i = 0;
				if (properties !== null){
					for (const [key, value] of Object.entries(properties)) {
						if (i <= 7) { //display only 8
							if (key.localeCompare("feature_id") !== 0){
								attr = "<tr><td><b>" + key + ": </b></td><td>" + value + "</td></tr>";
								content = content + attr;
							}
						}
						i = i + 1;
					}

				}
				if (i > 7){
					content = content + "<tr><td><b>.....</b></td><td>.....</td></tr></table>";
				}
				else{
					content = content + "</table>";
				}				
				L.popup().setContent(content).setLatLng(e.latlng).openOn(map);
				clearHighlight();
				highlight = e.layer.properties.feature_id;
				mapboxTileLayer.setFeatureStyle(highlight, {
					weight: 2,
					color: 'red',
					opacity: 1,
					fillColor: '#e5b404',
					fill: true,
					radius: 12,
					fillOpacity: 0.8
				});
				L.DomEvent.stop(e);
			 });
			var overlayMaps = {
					"Features": mapboxTileLayer,
					"Grid Cells":  grid
				};			
			
			L.control.layers(baseMaps, overlayMaps).addTo(map);
			L.control.scale().addTo(map);	
			map.on('click', 
					function(e){
						clearHighlight();
						var coord = e.latlng.toString().split(',');
						var lat = coord[0].split('(');
						var lng = coord[1].split(')');
						console.log("You clicked the map at latitude: " + lat[1] + " and longitude:" + lng[0]);
					});
			mapboxTileLayer.addTo(map);
			if (bounds !== null)
				map.fitBounds(bounds);
	}
</script>